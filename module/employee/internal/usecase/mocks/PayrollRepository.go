// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/eafajri/hr-service.git/module/employee/internal/entity"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PayrollRepository is an autogenerated mock type for the PayrollRepository type
type PayrollRepository struct {
	mock.Mock
}

// ClosePayrollPeriod provides a mock function with given fields: periodID
func (_m *PayrollRepository) ClosePayrollPeriod(periodID int64) error {
	ret := _m.Called(periodID)

	if len(ret) == 0 {
		panic("no return value specified for ClosePayrollPeriod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(periodID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePayslipsByPeriod provides a mock function with given fields: payslips
func (_m *PayrollRepository) CreatePayslipsByPeriod(payslips []entity.PayrollPayslip) error {
	ret := _m.Called(payslips)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayslipsByPeriod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]entity.PayrollPayslip) error); ok {
		r0 = rf(payslips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPayslip provides a mock function with given fields: userID, periodID
func (_m *PayrollRepository) GetPayslip(userID int64, periodID int64) (entity.PayrollPayslip, error) {
	ret := _m.Called(userID, periodID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayslip")
	}

	var r0 entity.PayrollPayslip
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (entity.PayrollPayslip, error)); ok {
		return rf(userID, periodID)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) entity.PayrollPayslip); ok {
		r0 = rf(userID, periodID)
	} else {
		r0 = ret.Get(0).(entity.PayrollPayslip)
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userID, periodID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayslips provides a mock function with given fields: periodID
func (_m *PayrollRepository) GetPayslips(periodID int64) ([]entity.PayrollPayslip, error) {
	ret := _m.Called(periodID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayslips")
	}

	var r0 []entity.PayrollPayslip
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]entity.PayrollPayslip, error)); ok {
		return rf(periodID)
	}
	if rf, ok := ret.Get(0).(func(int64) []entity.PayrollPayslip); ok {
		r0 = rf(periodID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.PayrollPayslip)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(periodID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPeriodByEntityDate provides a mock function with given fields: date
func (_m *PayrollRepository) GetPeriodByEntityDate(date time.Time) (entity.PayrollPeriod, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for GetPeriodByEntityDate")
	}

	var r0 entity.PayrollPeriod
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) (entity.PayrollPeriod, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(time.Time) entity.PayrollPeriod); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Get(0).(entity.PayrollPeriod)
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPeriodByID provides a mock function with given fields: periodID
func (_m *PayrollRepository) GetPeriodByID(periodID int64) (entity.PayrollPeriod, error) {
	ret := _m.Called(periodID)

	if len(ret) == 0 {
		panic("no return value specified for GetPeriodByID")
	}

	var r0 entity.PayrollPeriod
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (entity.PayrollPeriod, error)); ok {
		return rf(periodID)
	}
	if rf, ok := ret.Get(0).(func(int64) entity.PayrollPeriod); ok {
		r0 = rf(periodID)
	} else {
		r0 = ret.Get(0).(entity.PayrollPeriod)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(periodID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPayrollRepository creates a new instance of PayrollRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPayrollRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PayrollRepository {
	mock := &PayrollRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
